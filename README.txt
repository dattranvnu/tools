<h1 class="gamut-1ewwict-Text e8i0p5k0">Modeling Real Life Objects</h1><p class="gamut-1xdcsrc-Text e8i0p5k0"><span data-testid="markdown" class="markdown__1eeYJ4WPKUcvX_LDDGJR12">This module will showcase how Django uses models to represent real-life data and how to set up a database.</span></p><div class="gamut-unqu21-Box-ArticleContentContainer e1xfx7rd1"><div data-testid="markdown" class="spacing-loose__3_R8mSIQ2cspwhDGkCOXTu markdown__1eeYJ4WPKUcvX_LDDGJR12 darkTheme__2i0sjr_RjoITRh35Ld2GzM gamut-gk1onf-ArticleMarkdown e1xfx7rd0"><p class="p__1qg33Igem5pAgn4kPMirjw">One big reason we make apps is to solve real-life problems. To do so, we need to use information that maps closely to real life as well!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Django addresses this issue by using <em>models</em>. Models are how real-life objects get represented in a Django application. Then to store this information, we need a database. Conveniently, Django recognizes how common of an issue this is for developers and has a system set up for us to use.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><img src="https://static-assets.codecademy.com/skillpaths/django/first_app/django_mtv_diagram_bg.svg" alt="Django's MTV design pattern showing how models supply the data, views determine what data to show, and templates displaying the data" class="img__1JGFO2nlisObc3KeOSGPRp"></p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Click next to see what Django offers!</p>
</div></div>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">What are Models</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">We’ve seen firsthand how Django uses the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://static-assets.codecademy.com/skillpaths/django/first_app/django_mtv_diagram_bg.svg">Model-Template-View (MTV)</a> pattern to bring our apps to life. This time around, we’ll focus on the <em>model</em> portion of this pattern which deals heavily with the data in our app — this means we’ll also dive into the database!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We can think of models as representations of everyday objects. These models maintain key characteristics/properties of the objects used in our app. Consider these three objects: a rose, a daisy, and a tulip. They are flowers. <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> could be our model name and correspond to the table name in our database. The model might have characteristics like <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_number</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_color</code> which correspond to field names (think of them as column headings) in our database. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now imagine if we were creating a model for our users — trying to account for every single thing about a person would be almost impossible! Instead, we have to focus on the really important properties we want in our model that will later be stored as data in our database. How data gets organized in the database is known as a <em>schema</em>.  </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Also, notice that we mentioned <strong>models</strong> (plural) — in our apps, we’ll often work with more than just one. Therefore, we have to consider how models interact with each other and what relationships exist. The persistence of model data and how different models interact will drive the flow of our app! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this lesson, we’ll go through: </p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">How to think through schemas</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Creating and customizing models</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Connecting the Models with the Database </li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">With that information out of the way, let’s Djan<strong>go</strong>!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 body__3bSqqzbent-J_gmFLtFRzM"><p class="p__1qg33Igem5pAgn4kPMirjw">Review the GIF and see how everyday objects get translated into models. </p>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Creating a Schema</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Before we start writing code and committing information to our database, we need to take some time to consider the <strong>shape</strong> of the data that goes in. Some key questions are:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">What models do we want to create? </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">What model properties do we need to keep? </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">How do different models relate to each other?</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">As mentioned earlier, thinking through this process means that we’re coming up with a <em>schema</em>, which is a layout of the structure of our database represented by tables, similar to <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://en.wikipedia.org/wiki/Spreadsheet#Usage">spreadsheets</a>. Each table stores the specific and crucial information about a model.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Let’s work through a concrete example. For our web app, we want to create a Vet Office tool to help book appointments. So we have to ask ourselves (and/or our developer friends) what information do we need to make an “appointment”? </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">First, we need a table for appointments. And we know that an appointment has a date and time, and also a patient (pet). We’d also want each appointment to be unique, so each one should have their own ID. After constructing our appointment table, we’d realize we need to also store patient information! Like appointments, we’d have to figure out what information is vital for storage. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">This thought process continues until we’ve mapped out how our tables should look like. By end of this process, we’ll have a completed schema — take a glance over at the provided image.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this schema, we can see how different models <strong>relate</strong> to each other — an owner has patients (pets), and patients have appointments. These relationships are maintained by our SQLite <em>relational database</em> by connecting different tables together. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">For this lesson, we’ll simplify the process and focus on the two models <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> (<code class="code__2rdF32qjRVp7mMVBHuPwDS">Appointment</code> will be created in a later lesson). </p>
</div></div></div>


<h3>Instructions</h3>

<div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 body__3bSqqzbent-J_gmFLtFRzM"><p class="p__1qg33Igem5pAgn4kPMirjw">Look over the provided image to see the shape of our schema used in the Vet Office project. </p>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Creating a Model</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">We’ve thought through the schema and our database was set up by default when we first created our project. Time to create our models! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Every time we create a new app, Django provides us with a folder structure for our work  which includes a file called <strong>models.py</strong> with the following starter code:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">from</span><span class="mtk1"> </span><span class="mtk9">django</span><span class="mtk1">.</span><span class="mtk10">db</span><span class="mtk1"> </span><span class="mtk12">import</span><span class="mtk1"> </span><span class="mtk9">models</span></span><br><span><span> </span></span><br><span><span class="mtk16"># Create your models here.</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">To create a model, we write a class, like so: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16">## Define attributes here</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">pass</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice that our model actually inherits from the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Model</code> parent class <code class="code__2rdF32qjRVp7mMVBHuPwDS">django.db.models.Model</code> module. These models will later inform the database to use this schema to build its tables. In the example above, our database will know that incoming data records will contain attributes of our flowers, like perhaps, petal color, number of petals, average height, etc. For now, we’ve added the <code class="code__2rdF32qjRVp7mMVBHuPwDS">pass</code> keyword to avoid any errors since Python doesn’t allow for empty classes. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Let’s now create our first models!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">The file <strong>vetoffice/models.py</strong> is opened in the code editor. </p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Under the provided comment, create a model called <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">In the body of the class, add in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">pass</code> keyword to avoid getting an error about missing fields.</li>
</ol>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Add another model called <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> along with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">pass</code> keyword.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Adding Model Fields</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">As we mentioned, models are used to represent real-life objects. We can mimic and create object attributes in our models using <em>fields</em>. Fields have names and are assigned a type. For example, a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> model can have a <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_color</code> field that expects a string: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_color</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">()</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Django uses specific <em>field types</em> to match the expected data with what will go into the database. Above, we used the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/fields/#charfield"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.CharField()</code> type</a> to store a short string. We can continue to add to our model and include other attributes, like <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_number</code>. </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_color</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">()</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_number</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">IntegerField</span><span class="mtk1">()</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16"># More attributes… </span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Since we want <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_number</code> to be a number, we used the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.IntegerField()</code> field type. Django provides a huge variety of field types for us to specify the data types of our model attributes, check out <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/fields/#model-field-types">theField Types Documentation</a> to explore the entire list of possibilities! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We might also want to add constraints to our fields. For example, we might want our <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_color</code> field to have a max length of 20 characters. We can supply an argument like so: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_color</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">20</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_number</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">IntegerField</span><span class="mtk1">(</span><span class="mtk9">default</span><span class="mtk1">=</span><span class="mtk9">0</span><span class="mtk1">)</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">These arguments give us finer control over what data we want to include in our database. For <code class="code__2rdF32qjRVp7mMVBHuPwDS">.CharField()</code> we used <code class="code__2rdF32qjRVp7mMVBHuPwDS">max_length</code> to limit the number of acceptable characters to <code class="code__2rdF32qjRVp7mMVBHuPwDS">20</code>.  We can even set default values, like for <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_number</code>, we set <code class="code__2rdF32qjRVp7mMVBHuPwDS">default=0</code> meaning if we didn’t provide a value for <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_number</code> the value is automatically <code class="code__2rdF32qjRVp7mMVBHuPwDS">0</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Each field accepts different arguments, so make sure to check the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/fields/#model-field-types">documentation</a>.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s continue to build out our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> models, starting with <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">delete the <code class="code__2rdF32qjRVp7mMVBHuPwDS">pass</code> keyword</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">add a <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name</code> field that is a field type of <code class="code__2rdF32qjRVp7mMVBHuPwDS">.CharField()</code> </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">add an argument so <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name</code> can take up to <code class="code__2rdF32qjRVp7mMVBHuPwDS">30</code> characters </li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model still needs two more fields:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">last_name</code> that expects a string with a max of <code class="code__2rdF32qjRVp7mMVBHuPwDS">30</code> characters.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">phone</code> that expects a string with a max of <code class="code__2rdF32qjRVp7mMVBHuPwDS">30</code> characters.</li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Great, you can turn your attention to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> model now. Add in:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">breed</code> as a character field with a max length of <code class="code__2rdF32qjRVp7mMVBHuPwDS">200</code> characters.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">pet_name</code> as a character field with a max length of <code class="code__2rdF32qjRVp7mMVBHuPwDS">200</code> characters.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">age</code> as an integer field that defaults to <code class="code__2rdF32qjRVp7mMVBHuPwDS">0</code>. </li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Primary Key, Foreign Key, and Relationships</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Later on, we’ll use these models to create <em>instances</em> (specific model objects) in our database. With a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> model, we could create instances with characteristics of flowers like a rose, a sunflower, or a daisy. Instances then correspond to rows, or records, in our database.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’d also need our instances to have a unique ID to help us keep track of each one. These IDs are called <em>primary keys</em> and Django helps us automatically create these unique IDs by incrementing by <code class="code__2rdF32qjRVp7mMVBHuPwDS">1</code> each time. For example, if our first <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instance is  <code class="code__2rdF32qjRVp7mMVBHuPwDS">rose</code>, it would have a primary key/ID of <code class="code__2rdF32qjRVp7mMVBHuPwDS">1</code>. The second instance, <code class="code__2rdF32qjRVp7mMVBHuPwDS">sunflower</code>, a primary key of <code class="code__2rdF32qjRVp7mMVBHuPwDS">2</code> — then maybe a <code class="code__2rdF32qjRVp7mMVBHuPwDS">daisy</code> with a primary key of <code class="code__2rdF32qjRVp7mMVBHuPwDS">3</code>, and so forth: </p>
<div class="tableWrapper__EVxl5zAnBzx8EZsGfplAJ"><table>
<thead>
<tr>
<th>name</th>
<th>ID</th>
</tr>
</thead>
<tbody><tr>
<td><code class="code__2rdF32qjRVp7mMVBHuPwDS">rose</code></td>
<td>1</td>
</tr>
<tr>
<td><code class="code__2rdF32qjRVp7mMVBHuPwDS">sunflower</code></td>
<td>2</td>
</tr>
<tr>
<td><code class="code__2rdF32qjRVp7mMVBHuPwDS">daisy</code></td>
<td>3</td>
</tr>
</tbody></table></div>
<p class="p__1qg33Igem5pAgn4kPMirjw">In our apps, we often create multiple models that relate to each other in some way. For our example <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> model, we could have a gardener tend to flowers! This means we need to create another model called <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code>:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Gardener</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">first_name</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">20</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">years_experience</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">IntegerField</span><span class="mtk1">()</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now the question is how do we show this relationship between <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code>? Well, let’s say that a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> instance can tend to multiple <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instances, but a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instance can only have a single <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code>. This means we have a <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://en.wikipedia.org/wiki/One-to-many_%28data_model%29">One to Many</a> relationship, one <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> for multiple <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code>s. Conversely, <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code>s have a Many to One relationship with a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">To make this connection known, we need to supply <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> with a <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/fields/#foreignkey"><em>foreign key</em></a> of a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardner</code>, i.e. the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instances know which <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> instance takes care of it.  </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk16"># Garden has a&nbsp;one-to-many relationship with Flowe</span><span class="mtk16">r</span></span><br><span><span class="mtk12">class Gardener</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">first_name</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">20</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">years_experience</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">IntegerField</span><span class="mtk1">()</span></span><br><span><span> </span></span><br><span><span class="mtk16"># Flower has a&nbsp;many-to-one relationship with Garde</span><span class="mtk16">ner</span></span><br><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_color</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">10</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_number</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">IntegerField</span><span class="mtk1">()</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">gardener</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">ForeignKey</span><span class="mtk1">(</span><span class="mtk9">Gardener</span><span class="mtk1">, </span><span class="mtk9">on_delete</span><span class="mtk1">=</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CASCADE</span><span class="mtk1">) </span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Notice that we added the <code class="code__2rdF32qjRVp7mMVBHuPwDS">gardener</code> field using <code class="code__2rdF32qjRVp7mMVBHuPwDS">models.ForeignKey()</code> and with arguments. The first argument is <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> because that’s the model we want this foreign key to come from. Then we add <code class="code__2rdF32qjRVp7mMVBHuPwDS">on_delete=models.CASCADE</code> to let Django know to delete the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instance if its connected <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> instance is deleted. We’ll cover more about <code class="code__2rdF32qjRVp7mMVBHuPwDS">on_delete</code> in a later lesson — for more information check out <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/fields/#arguments">Django’s arguments documentation</a>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Hypothetically, we could even supply <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> with a foreign key as well if we wanted to link <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> to another model, like a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Garden</code> for example! These foreign keys tell the database that a one-to-many relationship exists and the direction of this relationship. There are other <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/db/examples/">types of relationships</a>, but let’s implement a one-to-many relationship with our own models! </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s consider the relationship between <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>s and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>s. To keep it simple, let’s say that an <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> instance can have multiple <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>s — and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code>s can only have one <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>. In code, that means the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> needs a foreign key of an <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create an <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner</code> property for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> class that has a field type of <code class="code__2rdF32qjRVp7mMVBHuPwDS">.ForeignKey()</code> with the first argument of <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and a second argument of <code class="code__2rdF32qjRVp7mMVBHuPwDS">on_delete=models.CASCADE</code>.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Field Type Optional Arguments</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">We can continue to customize our models by supplying fields with <em>options</em>, that specify how data can be inserted into the database. Django provides <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/db/models/#field-options">field option documentation</a>, which shows a huge list of these options. Let’s go over some common ones together!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">One common option is <code class="code__2rdF32qjRVp7mMVBHuPwDS">null</code> that can take on a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">True</code> or <code class="code__2rdF32qjRVp7mMVBHuPwDS">False</code>. This <code class="code__2rdF32qjRVp7mMVBHuPwDS">null</code> option tells the database if a <code class="code__2rdF32qjRVp7mMVBHuPwDS">field</code> can be left intentionally void of information. By default, Django sets <code class="code__2rdF32qjRVp7mMVBHuPwDS">null=False</code>. However, we can override the default and set <code class="code__2rdF32qjRVp7mMVBHuPwDS">null=True</code>. Here’s an example: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">model</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">petal_number</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">IntegerField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">20</span><span class="mtk1">, </span><span class="mtk9">null</span><span class="mtk1">=</span><span class="mtk12">True</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16"># Other fields </span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">With the code above, when we create a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instance, we can set <code class="code__2rdF32qjRVp7mMVBHuPwDS">petal_number</code> to <code class="code__2rdF32qjRVp7mMVBHuPwDS">null</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Another common option is <code class="code__2rdF32qjRVp7mMVBHuPwDS">blank</code>, which is similar to <code class="code__2rdF32qjRVp7mMVBHuPwDS">null</code>, but setting <code class="code__2rdF32qjRVp7mMVBHuPwDS">blank</code> to <code class="code__2rdF32qjRVp7mMVBHuPwDS">True</code> means a field doesn’t have to take anything, not even a <code class="code__2rdF32qjRVp7mMVBHuPwDS">null</code> value. By default <code class="code__2rdF32qjRVp7mMVBHuPwDS">blank</code> is <code class="code__2rdF32qjRVp7mMVBHuPwDS">False</code>. </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">model</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">nickname</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">20</span><span class="mtk1">, </span><span class="mtk9">blank</span><span class="mtk1">=</span><span class="mtk12">True</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16"># Other fields</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now, when we create a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instance, we can leave the <code class="code__2rdF32qjRVp7mMVBHuPwDS">nickname</code> field blank.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The last one we’ll touch upon is <code class="code__2rdF32qjRVp7mMVBHuPwDS">choices</code> which limits the input a field can accept. We can set <code class="code__2rdF32qjRVp7mMVBHuPwDS">choices</code> by creating a list of tuples that contain 2 items: a key and a value. Take for example: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">COLOR_CHOICES</span><span class="mtk1"> =&nbsp;[</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span class="mtk8">"R"</span><span class="mtk1">, </span><span class="mtk8">"Red"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span class="mtk8">"Y"</span><span class="mtk1">, </span><span class="mtk8">"Yellow"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span class="mtk8">"P"</span><span class="mtk1">, </span><span class="mtk8">"Purple"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span class="mtk8">"O"</span><span class="mtk1">, </span><span class="mtk8">"Other"</span><span class="mtk1">),</span></span><br><span><span class="mtk1">&nbsp;&nbsp;]</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">color</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">1</span><span class="mtk1">, </span><span class="mtk9">choices</span><span class="mtk1">=</span><span class="mtk9">COLOR_CHOICES</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16"># Other fields</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">For our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instance, we can specify its color with the limited choices provided — meaning our <code class="code__2rdF32qjRVp7mMVBHuPwDS">color</code> field can only be assigned <code class="code__2rdF32qjRVp7mMVBHuPwDS">"R"</code> (for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Red"</code>), <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Y"</code> (for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Yellow"</code>), or <code class="code__2rdF32qjRVp7mMVBHuPwDS">"P"</code> (for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Purple"</code>), or <code class="code__2rdF32qjRVp7mMVBHuPwDS">"O"</code> (for <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Other"</code> from the <code class="code__2rdF32qjRVp7mMVBHuPwDS">COLOR_CHOICES</code> list. With <code class="code__2rdF32qjRVp7mMVBHuPwDS">choices</code> we know exactly what data we can accept from users. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We covered 3 options in this exercise, but remember, there are many more <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/db/models/#field-options">field options</a> to explore!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s implement <code class="code__2rdF32qjRVp7mMVBHuPwDS">choices</code> for our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> model, starting with creating the variables for our tuple’s key values. This implementation will look slightly different from the provided examples, but it’s the same underlying concept. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> class, create the variables with the associated values:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">DOG</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"DO"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">CAT</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"CA"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">BIRD</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"BI"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">REPTILE</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"RE"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">OTHER</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"OT"</code></li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">You’ll be using these values later in the list of tuples later.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Below your newly created variables, you can create your list of tuples now.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The list should have a name of <code class="code__2rdF32qjRVp7mMVBHuPwDS">ANIMAL_TYPE_CHOICES</code> and contain the values:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">(DOG, "Dog")</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">(CAT, "Cat")</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">(BIRD, "Bird")</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">(REPTILE, "Reptile")</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">(OTHER, "Other")</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Your tuple’s good to go, so you can create the actual field named <code class="code__2rdF32qjRVp7mMVBHuPwDS">animal_type</code>. This field should:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">be a character field </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">have a max length of <code class="code__2rdF32qjRVp7mMVBHuPwDS">2</code> characters</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">choices</code> of <code class="code__2rdF32qjRVp7mMVBHuPwDS">ANIMAL_TYPE_CHOICES</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">a <code class="code__2rdF32qjRVp7mMVBHuPwDS">default</code> of <code class="code__2rdF32qjRVp7mMVBHuPwDS">OTHER</code> </li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Model Metadata</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">We’ve supplied our models with plenty of fields and data, but what about <em>metadata</em>? Let’s first define it. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/options/#model-meta-options">Metadata</a> is an optional entity within a model and it is anything that is not a field. Some helpful metadata can include how to order instances, create human-readable names, providing a database table name, and more. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">To add metadata to a model, we’ll need to nest another <code class="code__2rdF32qjRVp7mMVBHuPwDS">class</code> called <code class="code__2rdF32qjRVp7mMVBHuPwDS">Meta</code> inside the model’s class definition. Let’s use metadata to order instances as an example:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">name</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">10</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16"># All the other attributes</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">class Meta</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk9">ordering</span><span class="mtk1"> =&nbsp;[</span><span class="mtk8">"name"</span><span class="mtk1">]</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this case, we created an attribute, <code class="code__2rdF32qjRVp7mMVBHuPwDS">ordering</code> which takes a list of strings (<code class="code__2rdF32qjRVp7mMVBHuPwDS">["name"]</code>) that determine the ordering. Later on, when we need to search for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> instances, the database will return back a list with the list ordered by the <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> field. We can even reverse the order by adding a <code class="code__2rdF32qjRVp7mMVBHuPwDS">-</code> in front of a string like <code class="code__2rdF32qjRVp7mMVBHuPwDS">["-name"]</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Other metadata work in a similar fashion. Let’s try adding a verbose human-readable name:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class TropicalFlower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk16"># Fields and Methods</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">class Meta</span><span class="mtk1">:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk9">verbose_name</span><span class="mtk1"> =&nbsp;</span><span class="mtk8">"tropical flower"</span><span class="mtk1"> </span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Without setting this metadata, our model’s name would be <code class="code__2rdF32qjRVp7mMVBHuPwDS">tropical_flower</code> by default, here we’ve assigned the verbose name to be <code class="code__2rdF32qjRVp7mMVBHuPwDS">"tropical flower"</code>. While our change was subtle, we could provide even more detail to inform other developers about our model. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> class, under the other properties, add the nested class <code class="code__2rdF32qjRVp7mMVBHuPwDS">Meta</code> and give it a <code class="code__2rdF32qjRVp7mMVBHuPwDS">ordering</code> attribute with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">["pet_name"]</code>. </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Native Model Methods </span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">We haven’t implemented <em>methods</em> yet to  emulate any model behaviors. The properties we’ve created for our flowers describe what our flower <strong>is</strong> or <strong>has</strong>. They are like the nouns and adjectives that describe each flower. What we are missing though, and why modeling database data is so useful to begin with, are the <strong>verbs</strong>, the actions associated with our flowers.  These are called methods. Methods are functions defined in our model that describe the behaviors and actions of our model. If properties are what our models <strong>are</strong>, then methods are what our models <strong>do</strong>. For example, our flower might <code class="code__2rdF32qjRVp7mMVBHuPwDS">bloom()</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">grow()</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In Python classes, which Django uses to create models, there are built-in methods we can override like the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/instances/#str"><code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method</a>. All this means is we are creating a method using the same name as the built-in one. This is how we, the programmer, take control, or “override”, the default behavior of the built-in version:  </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Gardener</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">name</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">CharField</span><span class="mtk1">(</span><span class="mtk9">max_length</span><span class="mtk1">=</span><span class="mtk9">30</span><span class="mtk1">)</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">def __str__</span><span class="mtk1">(</span><span class="mtk9">self</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">self</span><span class="mtk1">.</span><span class="mtk10">name</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Methods always require the first parameter to be <code class="code__2rdF32qjRVp7mMVBHuPwDS">self</code>, then we can provide other optional parameters and add logic within the method body. In the next lesson, we’ll learn how useful overriding <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> is when we need to retrieve instances of models from our database — by default, if we didn’t override <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> printing our instances would generate output that’s hard to read like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&lt;QuerySet [&lt;Gardener:&gt;,&lt;Gardener:&gt;,&lt;Gardener:&gt;....</span><span class="mtk1">]</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">But with our overridden  <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method, we’ll get more helpful information, in this case, we’re returning the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> instance’s name:  </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&lt;QuerySet [&lt;Gardener: Linnaeus&gt;,&lt;Gardener: Mendel&gt;</span><span class="mtk1">, &lt;Gardener: Carver &gt;....]</span></span><br></div></code></pre></pre></div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model create a <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method that returns the instance’s <code class="code__2rdF32qjRVp7mMVBHuPwDS">.first_name</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">.last_name</code> concatenated with a space in between like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk9">first_string</span><span class="mtk1"> +&nbsp;</span><span class="mtk8">" "</span><span class="mtk1"> +&nbsp;</span><span class="mtk9">second_string</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">That should print out one concatenated string like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">John Doe</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Or </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">Danny Glover</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s also implement a <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> as well. This time return a string that contains the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.pet_name</code> and the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.animal_type</code> separated by a comma and space (<code class="code__2rdF32qjRVp7mMVBHuPwDS">", "</code>). </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">For example, the outputs should look like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">Captain Whiskers, Cat</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Or</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">Mustached Dragon, Reptile</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Custom Model Methods</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In addition to overriding native methods, we can define our own custom methods!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We can do something simple like returning a boolean:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Flower</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">has_sunlight</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">BooleanField</span><span class="mtk1">(</span><span class="mtk9">default</span><span class="mtk1">=</span><span class="mtk12">True</span><span class="mtk1">)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">has_water</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">BooleanField</span><span class="mtk1">(</span><span class="mtk9">default</span><span class="mtk1">=</span><span class="mtk12">True</span><span class="mtk1">)</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">def can_grow</span><span class="mtk1">(</span><span class="mtk9">self</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">self</span><span class="mtk1">.</span><span class="mtk10">has_sunlight</span><span class="mtk1"> </span><span class="mtk12">and</span><span class="mtk1"> </span><span class="mtk9">self</span><span class="mtk1">.</span><span class="mtk10">has_water</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">Above, we defined our custom <code class="code__2rdF32qjRVp7mMVBHuPwDS">.can_grow()</code> method that checks if the instance’s <code class="code__2rdF32qjRVp7mMVBHuPwDS">.has_sunlight</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">.has_water</code> fields are <code class="code__2rdF32qjRVp7mMVBHuPwDS">True</code>. Notice that even for custom methods, we need to provide the first parameter as <code class="code__2rdF32qjRVp7mMVBHuPwDS">self</code>. We can also provide additional parameters as needed. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Here’s another example that returns a string: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">class Gardener</span><span class="mtk1">(</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">Model</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk9">years_experience</span><span class="mtk1"> =&nbsp;</span><span class="mtk9">models</span><span class="mtk1">.</span><span class="mtk10">IntegerField</span><span class="mtk1">()</span></span><br><span><span> </span></span><br><span><span class="mtk1">&nbsp;&nbsp;</span><span class="mtk12">def identify_flower</span><span class="mtk1">(</span><span class="mtk9">self</span><span class="mtk1">, </span><span class="mtk9">flower</span><span class="mtk1">):</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">f</span><span class="mtk8">"I've studied flowers for {self.years_experience}.</span><span class="mtk8"> I&nbsp;believe this flower is {flower.name} and is fou</span><span class="mtk8">nd in {flower.native_env}."</span><span class="mtk1"> </span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this case, we’ve added a second parameter to our method, a <code class="code__2rdF32qjRVp7mMVBHuPwDS">flower</code> instance, and returned a string. Both methods do different things but both help emulate real-life behaviors. Check out <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/db/models/#model-methods">Django documentation</a> for more insight!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s define a method for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> that checks if they have multiple pets or not.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> class, define a method called <code class="code__2rdF32qjRVp7mMVBHuPwDS">.has_multiple_pets()</code> that returns a boolean if the owner does have more than 1 pet. Use the logic provided below:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="codecademy-python" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk12">return</span><span class="mtk1"> </span><span class="mtk9">self</span><span class="mtk1">.</span><span class="mtk10">patient_set</span><span class="mtk9">.</span><span class="mtk10">count</span><span class="mtk1">() </span><span class="mtk9">&gt;</span><span class="mtk1"> </span><span class="mtk9">1</span></span><br></div></code></pre></pre>
<p class="p__1qg33Igem5pAgn4kPMirjw">This code checks the related <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> model and how many instances belong to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code>. We’ll cover more of this logic in the next lesson. </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Migrations - makemigrations</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">From when we first created our project, we’ve configured some database settings and let our project know about our app in <strong>settings.py</strong>. Now we need to let our database know about our models. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">This step of setting the database to match the structure of the models is <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/migrations/">called <em>migration</em></a>. Remember, migrations are needed when we make changes to our models — and we’ve just made two new ones! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In Django, there are two steps necessary to make this migration happen:</p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Running <code class="code__2rdF32qjRVp7mMVBHuPwDS">python3 manage.py makemigrations</code> to create a file with the instructions needed for our database to create the proper schemas.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Running <code class="code__2rdF32qjRVp7mMVBHuPwDS">python3 manage.py migrate</code> to execute the instructions in our file to create the actual tables in our database.</li>
</ol>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ll first focus on <code class="code__2rdF32qjRVp7mMVBHuPwDS">makemigrations</code>. Since we need to use <strong>manage.py</strong> to execute this step, we need to be in our root folder to execute:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py makemigrations</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Using our hypothetical <code class="code__2rdF32qjRVp7mMVBHuPwDS">Flower</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Gardener</code> example, we should see something similar to:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">Migrations for 'gardens':</span></span><br><span><span class="mtk1">&nbsp;&nbsp;gardens/migrations/0001_initial.py</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;- Create model Flower</span></span><br><span><span class="mtk1">&nbsp;&nbsp;&nbsp;&nbsp;- Create model Gardener</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">We can also provide an additional argument after <code class="code__2rdF32qjRVp7mMVBHuPwDS">makemigrations</code> and specify a chosen app’s models we want to commit. For instance, if we had two apps <code class="code__2rdF32qjRVp7mMVBHuPwDS">Garden</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">FlowerShop</code> and we only wanted to commit the models for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Garden</code>, we could execute the command: <code class="code__2rdF32qjRVp7mMVBHuPwDS">python3 manage.py makemigrations garden</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The files created from this step live in the <strong>migrations</strong> folder within our app directory.  Our first migration file would begin with <strong>0001_initial.py</strong>. We can refer to our migrations using the starting numbers, in this case, it has a migration name of <code class="code__2rdF32qjRVp7mMVBHuPwDS">0001</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">It’s important that every time we need to make a change to the schema in our database we need to do this <code class="code__2rdF32qjRVp7mMVBHuPwDS">makemigrations</code> step! Subsequent migration files will increase the number at the beginning of the file. For example, the second migration will begin with <strong>0002_xxxxx.py</strong> and so forth. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ll run the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#django-admin-makemigrations"><code class="code__2rdF32qjRVp7mMVBHuPwDS">makemigrations</code> step</a> now and then follow up with the next step in the next exercise. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">You should already be in the project’s root folder. In the terminal, type out and execute the command: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py makemigrations</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">After you’ve created this migration file, check <code class="code__2rdF32qjRVp7mMVBHuPwDS">vetoffice/migrations/</code> folder to see that it now has a file called: <strong>0001_initial.py</strong>!</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Migrations - migrate</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">With our migration file set up, it’s time to use the code in our file to make changes to our database. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The command to execute at the terminal would be:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py migrate</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Like <code class="code__2rdF32qjRVp7mMVBHuPwDS">makemigrations</code>, if our project supports multiple apps, we can pass in the particular app name to the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#django-admin-migrate"><code class="code__2rdF32qjRVp7mMVBHuPwDS">migrate</code> command</a> as well. For example:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py migrate garden</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Where <code class="code__2rdF32qjRVp7mMVBHuPwDS">garden</code> is the name of our app. We should see some output like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">Operations to perform:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;Apply all migrations: gardens</span></span><br><span><span class="mtk1">Running migrations:</span></span><br><span><span class="mtk1">&nbsp;&nbsp;Rendering model states... DONE</span></span><br><span><span class="mtk1">&nbsp;&nbsp;Applying garden.0001_initial... OK</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">After executing the <code class="code__2rdF32qjRVp7mMVBHuPwDS">migrate</code> command, our database is set up! Under the hood, Django is <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#django-admin-sqlmigrate">handling the SQL commands</a> needed to make this migration happen — however, that’s beyond this lesson’s scope. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">If we need to reverse a migration, Django also makes this possible by specifying the migration we want to revert back to: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py migrate &lt;migration_name&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Where we replace <code class="code__2rdF32qjRVp7mMVBHuPwDS">&lt;migration_name&gt;</code> with the name of the migration like <code class="code__2rdF32qjRVp7mMVBHuPwDS">0001</code>. Then the database’s schema reverts back to the model from our <code class="code__2rdF32qjRVp7mMVBHuPwDS">0001</code> migration! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">However, in some cases, migrations cannot be unapplied like if we dropped a table in a previous migration. In such cases, we’ll get an <code class="code__2rdF32qjRVp7mMVBHuPwDS">IrreversibleError</code>. Check out Django’s <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/migrations/#reversing-migrations">documentation</a> for more information. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Double check the migration file in the <strong>migration</strong> folder to see <strong>0001_initial.py</strong> there and ready to go. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Run the <code class="code__2rdF32qjRVp7mMVBHuPwDS">migrate</code> command in the terminal to finish the migration! </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Models and Databases</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Review</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Nice work, we’ve done a lot in this lesson and we’re going to get our databases populated soon! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In this lesson, we covered:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">A schema is a structure we design for the data in our application.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">A model is a Python class that contains characteristics and behavior using: attributes, metadata, and methods.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Model attributes are implemented using Django field names and different field types. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Django models can relate to other models. One way of showing this connection is to use a foreign key.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Django field types accept optional keyword arguments based on key-value pairs such as <code class="code__2rdF32qjRVp7mMVBHuPwDS">null</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">blank</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">choices</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">default</code>, and <code class="code__2rdF32qjRVp7mMVBHuPwDS">primary_key</code>. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Models can contain metadata using a nested <code class="code__2rdF32qjRVp7mMVBHuPwDS">Meta</code> class and providing specific attributes.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Models can have methods that are functions specific to that model. Some methods are inherited from the parent <code class="code__2rdF32qjRVp7mMVBHuPwDS">Model</code> class.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Django requires that we commit our models to the database via a two-step migration procedure with <code class="code__2rdF32qjRVp7mMVBHuPwDS">makemigrations</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">migrate</code>.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Django lets us undo one or more migrations by supplying the <code class="code__2rdF32qjRVp7mMVBHuPwDS">migrate</code> command with a named migration.</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Our models and database are now all set up and ready to accept and store information — time to Djump for Djoy!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 body__3bSqqzbent-J_gmFLtFRzM"><p class="p__1qg33Igem5pAgn4kPMirjw">Feel free to play around with the code provided!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">If you want to challenge yourself further consider:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Creating another model related <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> or <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Adding more custom methods to your models</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Looking over the SQL file that’s generated from migrations</li>
</ul>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">What is CRUD?</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">So far we’ve set up our models and database. But now it’s important that we are able to interact with our database to:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><strong>Create</strong> new information </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><strong>Read</strong> specific information </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><strong>Update</strong> information </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><strong>Delete</strong> information </li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">These are the four basic functions of a database also known as <em>CRUD</em>. Being able to perform these actions on our database allows us to have more control over our website and introduce more complexity.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In order for us to communicate with the database and perform CRUD functionalities, we can use <em>Structured Query Language</em>, also known as <a target="_blank" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://www.codecademy.com/learn/learn-sql"><em>SQL</em></a>. We can think of it as a bridge connecting our project and the database together. Raw SQL can be time-consuming but since we’re using the Django framework, any SQL needed is handled through the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/querysets/">QuerySet API</a>. This API, provided by Django, converts our Python queries into SQL to communicate with the database.  </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">As we progress throughout this lesson, we will learn how to:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Perform each concept of CRUD</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Learn useful querying methods </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Query two tables at the same time  </li>
</ul>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Creating an Instance</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In this exercise, we will use the <em>Python shell</em> to create <em>instances</em> of models. The Python shell is a command-line tool that starts up a Python interpreter which we will use to execute CRUD functionality.   </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We can run the Python shell by using the following command in the command-line tool.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">In order to work with our models in the Python shell we need to import them the same way we would in a Python file:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; from app_name.models import ModelName</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">With our model imported, we can start creating instances (specific examples) of the model. Let’s say that we’re creating a website like Twitter that has a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Post</code> model with the fields <code class="code__2rdF32qjRVp7mMVBHuPwDS">title</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">description</code>. To create an instance of our model we need to call our model and fill out the fields like so: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; post_instance=Post(title="New", description="M</span><span class="mtk1">y Post")</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Here, we start with a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">post_instance</code> that will store our instance. Then we used the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Post</code> model and provided the necessary arguments and values for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">title</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">description</code> fields. Note that while variables are not necessary to create instances, it gives us a nice way to refer to our created instances later on.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ve created our instance but we still need to save it to our database by calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">.save()</code> on the <code class="code__2rdF32qjRVp7mMVBHuPwDS">post_instance</code> variable:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; post_instance.save()</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">With our instance made, we should exit out of the shell. We can exit out of the Python shell by typing out the command <code class="code__2rdF32qjRVp7mMVBHuPwDS">exit()</code>. In Windows we can press <kbd>ctrl</kbd> + <kbd>Z</kbd>. On Mac or Linux <kbd>ctrl</kbd> + <kbd>D</kbd>.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Launch the Python shell in the terminal using: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><blockquote class="blockquote__Bo1k0tPllp684-m2XzKRP">
<p class="p__1qg33Igem5pAgn4kPMirjw">Note: If your screen size doesn’t allow for the commands to fit on a single line, the tests in this lesson’s exercises may fail. To ensure that tests are working properly, please stretch out the length of the Terminal to fit any commands into a single line. </p>
</blockquote>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Import the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model from the <strong>vetoffice</strong> app with the following code:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Create an instance of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model using a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner_instance</code> with the fields:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Vint"</code></p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">last_name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Kahn"</code></p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">phone</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"951-262-3062"</code></p>
</li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">4.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Save the instance of the model by calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">.save()</code> on <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner_instance</code>.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 5 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Creating an Instance</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In this exercise, we will use the <em>Python shell</em> to create <em>instances</em> of models. The Python shell is a command-line tool that starts up a Python interpreter which we will use to execute CRUD functionality.   </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We can run the Python shell by using the following command in the command-line tool.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">In order to work with our models in the Python shell we need to import them the same way we would in a Python file:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; from app_name.models import ModelName</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">With our model imported, we can start creating instances (specific examples) of the model. Let’s say that we’re creating a website like Twitter that has a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Post</code> model with the fields <code class="code__2rdF32qjRVp7mMVBHuPwDS">title</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">description</code>. To create an instance of our model we need to call our model and fill out the fields like so: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; post_instance=Post(title="New", description="M</span><span class="mtk1">y Post")</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Here, we start with a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">post_instance</code> that will store our instance. Then we used the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Post</code> model and provided the necessary arguments and values for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">title</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">description</code> fields. Note that while variables are not necessary to create instances, it gives us a nice way to refer to our created instances later on.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ve created our instance but we still need to save it to our database by calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">.save()</code> on the <code class="code__2rdF32qjRVp7mMVBHuPwDS">post_instance</code> variable:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; post_instance.save()</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">With our instance made, we should exit out of the shell. We can exit out of the Python shell by typing out the command <code class="code__2rdF32qjRVp7mMVBHuPwDS">exit()</code>. In Windows we can press <kbd>ctrl</kbd> + <kbd>Z</kbd>. On Mac or Linux <kbd>ctrl</kbd> + <kbd>D</kbd>.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Launch the Python shell in the terminal using: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><blockquote class="blockquote__Bo1k0tPllp684-m2XzKRP">
<p class="p__1qg33Igem5pAgn4kPMirjw">Note: If your screen size doesn’t allow for the commands to fit on a single line, the tests in this lesson’s exercises may fail. To ensure that tests are working properly, please stretch out the length of the Terminal to fit any commands into a single line. </p>
</blockquote>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Import the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model from the <strong>vetoffice</strong> app with the following code:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Create an instance of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model using a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner_instance</code> with the fields:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Vint"</code></p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">last_name</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Kahn"</code></p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">phone</code> as <code class="code__2rdF32qjRVp7mMVBHuPwDS">"951-262-3062"</code></p>
</li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">4.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Save the instance of the model by calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">.save()</code> on <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner_instance</code>.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 5 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Updating an Instance</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In the previous exercise, we learned how to view all instances of a model and individual instances. Now let’s learn how to update an instance’s field value. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Imagine we stored our first instance of a model in a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_instance</code>. To view one of its field’s values we can use dot notation:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">first_instance.name</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Above, we’re accessing <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_instance</code>‘s <code class="code__2rdF32qjRVp7mMVBHuPwDS">.name</code> field’s value. This would give us an output of the value like so:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; first_instance.name</span></span><br><span><span class="mtk1">'Asiqur'</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">If we want to change the field’s value, we can reassign it to something else.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; first_instance.name =&nbsp;"Ruqisa"</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">When we hit <kbd>Enter</kbd> the instance’s <code class="code__2rdF32qjRVp7mMVBHuPwDS">name</code> field value will be changed to <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Ruqisa"</code>. If we type out <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_instance.name</code> again and hit <kbd>Enter</kbd> it will return an output value of  <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Ruqisa"</code>. </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; first_instance.name</span></span><br><span><span class="mtk1">'Ruqisa'</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Great! We were able to update the field value of our instance, but it’s still not saved into our database until we call the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.save()</code> method like so:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; first_instance.save()</span></span><br></div></code></pre></pre></div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">As mentioned, here are the commands to get started:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Followed by:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that we’re in the shell and have imported our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model: </p>
<ol class="ol__1XI8Ausmo9cwwog3NvDzWF">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw">Store the first instance of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model in a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> by using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.first()</code> query method.</p>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><p class="p__1qg33Igem5pAgn4kPMirjw">Access the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.first_name</code> field of the instance saved in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> variable.</p>
</li>
</ol>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Change the value of the field <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name</code> of the instance saved in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> variable to <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Khadaza"</code>.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">4.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.save()</code> method on the <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> variable to send the change into the database. </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 5 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">5.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Type out <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner.first_name</code> and hit <kbd>Enter</kbd> again to see the changes.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 6 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Deleting an Instance</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">So far we’ve learned how to create, read, update instances, now let’s learn how to delete instances. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We can delete an instance by using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.delete()</code> method like so:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; first_instance.delete()</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">This method will delete the instance stored in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_instance</code> variable from our database. We’ve deleted our instance, but what if we wanted to also delete everything that was related to that instance? This is where <code class="code__2rdF32qjRVp7mMVBHuPwDS">.CASCADE</code> comes in, and it saves us a lot of time!</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We’ve seen <code class="code__2rdF32qjRVp7mMVBHuPwDS">.CASCADE</code> before when discussing foreign keys, so let’s dive a little deeper. We can think of <code class="code__2rdF32qjRVp7mMVBHuPwDS">.CASCADE</code> like a domino effect, where one falling domino knocks down an entire row of dominos. Therefore, when we use <code class="code__2rdF32qjRVp7mMVBHuPwDS">.CASCADE</code> to delete an object, any other object that has a reference to it also gets deleted. Imagine we have a Twitter account. When we delete our account, anything related to the account also gets deleted. Without this cascade effect, after we deleted our account, our post(s) would still be in the database! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.CASCADE</code> needs to be implemented in our model itself and we need to provide the argument <code class="code__2rdF32qjRVp7mMVBHuPwDS">on_delete=models.CASCADE</code> to any foreign key’s in our model. Let’s say we have a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Post</code> model that has a field listing a user instance as a foreign key from a <code class="code__2rdF32qjRVp7mMVBHuPwDS">User</code> model. </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">class Post(models.Model)</span></span><br><span><span class="mtk1">&nbsp;&nbsp;users =&nbsp;models.ForeignKey(User, on_delete=models</span><span class="mtk1">.CASCADE)</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">We have our foreign key but we also included <code class="code__2rdF32qjRVp7mMVBHuPwDS">on_delete=models.CASCADE</code> as an argument. If a user gets deleted from the <code class="code__2rdF32qjRVp7mMVBHuPwDS">User</code> model, all <code class="code__2rdF32qjRVp7mMVBHuPwDS">Post</code> instances related to that user will also get deleted.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Look over <strong>models.py</strong>, remember that in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> model there is an <code class="code__2rdF32qjRVp7mMVBHuPwDS">owner</code> field with <code class="code__2rdF32qjRVp7mMVBHuPwDS">on_delete=models.CASCADE</code> that has already been written. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now, every time an <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> instance gets deleted, every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> instance related to that <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> instance will also get deleted.  </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">For convenience, here are the commands to get started in the shell:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Followed by:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Store the first instance of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model in a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.first()</code> query. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Then use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.delete()</code> query method on the variable to delete the instance.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">The get() and get_or_create() Method</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Yay, we’ve finished with the basics of CRUD! Now let’s get introduced to some useful methods, starting with <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/querysets/#get"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code> method</a> returns an object that matches the arguments we give it. This method should mainly be used to look up values that are unique to return a single instance. If our query returns multiple objects we will get a <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/exceptions/#multipleobjectsreturned"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.MultipleObjectsReturned</code> exception</a>. And if nothing matches, we’ll get a <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/exceptions/#objectdoesnotexist"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.DoesNotExist</code> exception</a>.  Here’s an example of the syntax: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; unique_instance =&nbsp;ModelName.objects.get(name="</span><span class="mtk1">Ruqisa")</span></span><br><span><span class="mtk1">&gt;&gt;&gt; unique_instance</span></span><br><span><span class="mtk1">&lt;ModelName: ModelName object (10)&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">In the example above, we called <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code> with a <code class="code__2rdF32qjRVp7mMVBHuPwDS">name="Ruqisa"</code> argument and when we check the returned value, we get an instance.  Even though we only used a single argument, we could’ve added as many arguments as there are fields. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Another method that gives even more functionality is the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/querysets/#get-or-create"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.get_or_create()</code> method</a>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">What <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get_or_create()</code> does is look through the database for an object with the conditions that we provide. If an object fits our conditions it will return the object, otherwise, it will create the object hence its name <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get_or_create()</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Let’s look at an example: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; wanted_object =&nbsp;ModelName.objects.get_or_creat</span><span class="mtk1">e(title="example", content="jango")</span></span><br><span><span class="mtk1">&gt;&gt;&gt; wanted_object</span></span><br><span><span class="mtk1">(&lt;ModelName: ModelName object (15)&gt;, True)</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">The code above looks through our database for an object with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">title</code> of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"example"</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">content</code> of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"jango"</code>. Notice that we get a tuple back. The first element of the tuple is the object itself and the second element is a boolean (<code class="code__2rdF32qjRVp7mMVBHuPwDS">True</code> if the object was just created, or <code class="code__2rdF32qjRVp7mMVBHuPwDS">False</code> if the object was not just created). In this case, there was no model that has a <code class="code__2rdF32qjRVp7mMVBHuPwDS">title="example"</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">content="jango"</code>. Hence we get back <code class="code__2rdF32qjRVp7mMVBHuPwDS">(&lt;ModelName: ModelName object (15)&gt;, True)</code>. </p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">For convenience, here are the commands to get started in the shell:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Followed by:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s first see <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code> in action.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">object_match</code>, then use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code> method to return an instance of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model with the field <code class="code__2rdF32qjRVp7mMVBHuPwDS">last_name</code> that matches <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Uddin"</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Then type out <code class="code__2rdF32qjRVp7mMVBHuPwDS">object_match</code> and hit <kbd>Enter</kbd> to see what gets returned.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Now let’s try the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get_or_create()</code> method. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">some_object</code> that will store the result of calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get_or_create()</code> method on the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model with matching arguments of: </p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name = "Elon"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">last_name = "Musk"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">phone = "344-555-1234"</code></li>
</ul>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Additional Useful Querying Methods</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s look at some other common querying methods, like <code class="code__2rdF32qjRVp7mMVBHuPwDS">.exclude()</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">The <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/querysets/#exclude"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.exclude()</code> method</a> does the exact opposite of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code> method. Instead of returning an object with matching arguments, it returns all objects that do <strong>not</strong> match the arguments. </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; not_trucks =&nbsp;ModelName.objects.exclude(title="</span><span class="mtk1">truck")</span></span><br><span><span class="mtk1">&gt;&gt;&gt; not_trucks</span></span><br><span><span class="mtk1">&lt;QuerySet [&lt;ModelName: object (1)&gt;, &lt;ModelName: ob</span><span class="mtk1">ject (2)&gt;]&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Another helpful method is the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/querysets/#order-by"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.order_by()</code> method</a>. It allows us to return a list of objects based on a specified order. We can return based on the date posted, by ID number, etc. </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; ordered_by_id =&nbsp;modelName.objects.order_by("-p</span><span class="mtk1">k")</span></span><br><span><span class="mtk1">&gt;&gt;&gt; ordered_by_id</span></span><br><span><span class="mtk1">&lt;QuerySet [&lt;ModelName: object (2)&gt;, &lt;ModelName: ob</span><span class="mtk1">ject (1)&gt;]&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Above, we created an <code class="code__2rdF32qjRVp7mMVBHuPwDS">ordered_by_id</code> variable. In the variable we called a model and used the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.order_by()</code> method to sort by <code class="code__2rdF32qjRVp7mMVBHuPwDS">"pk"</code>, or primary key/ID. We returned our instances by ID in descending order by adding the negative <code class="code__2rdF32qjRVp7mMVBHuPwDS">"-"</code> sign in front of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"pk"</code>. Notice that we have <code class="code__2rdF32qjRVp7mMVBHuPwDS">object(2)</code> appear before <code class="code__2rdF32qjRVp7mMVBHuPwDS">object(1)</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">We can even return the objects randomly:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; random_ordering =&nbsp;ModelName.objects.order_by("</span><span class="mtk1">?")</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">This will return our objects ordered randomly every time. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">There are many more useful query methods that we can look up in Django’s <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/querysets/">documentation</a>.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">For convenience, here are the commands to get started in the shell:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Followed by:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Create a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">descending_order</code>. Then assign to the variable, the returned value of calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">.order_by()</code> on the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model — with all the instances in descending order by primary key.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Type out the <code class="code__2rdF32qjRVp7mMVBHuPwDS">descending_order</code> variable and press <kbd>Enter</kbd> to see how the QuerySet gets returned. </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Create a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">not_included</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Assign to <code class="code__2rdF32qjRVp7mMVBHuPwDS">not_included</code> the result of calling <code class="code__2rdF32qjRVp7mMVBHuPwDS">.exclude()</code> on the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model with the argument of <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name="Elon"</code>.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Type out the <code class="code__2rdF32qjRVp7mMVBHuPwDS">not_included</code> variable and press <kbd>Enter</kbd> to see the returned objects.  </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Querying Two Tables</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Oftentimes, we need to work with different models at the same time since apps generally have more than a single model and their models often relate to each other. To gain more insight into how these models work together and what information they share, we should learn how to query two tables at the same time.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Remember, foreign keys can connect two tables together through a one-to-many relationship. For example, imagine if we have an <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> model and a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> model. A single <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> can have many <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> instances. So the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> model stores a foreign key of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> model to its own table.  </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now let’s say we want to return every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> to a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code>. We can use the <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/topics/db/queries/#retrieving-specific-objects-with-filters"><code class="code__2rdF32qjRVp7mMVBHuPwDS">.filter()</code> method</a> to look for every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> instance related to a question instance. The first thing we need to do is capture a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> instance in a variable. For now, let’s say we have a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">question_instance</code> that holds the question <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Is blue a color?"</code>. Now in our <code class="code__2rdF32qjRVp7mMVBHuPwDS">.filter()</code> method, we can provide the <code class="code__2rdF32qjRVp7mMVBHuPwDS">question_instance</code> variable as an argument and get back matching results.</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; question_instance =&nbsp;Question.objects.get(quest</span><span class="mtk1">ion="Is blue a&nbsp;color?") </span></span><br><span><span class="mtk1">&gt;&gt;&gt; Answer.objects.filter(question=question_instan</span><span class="mtk1">ce)</span></span><br><span><span class="mtk1">&lt;QuerySet [&lt;Answer: No&gt;, &lt;Answer: Yes&gt;, &lt;Answer: I</span><span class="mtk1">t is a&nbsp;number&gt;]&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Above, we used the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> model and called the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.filter()</code> method with the argument <code class="code__2rdF32qjRVp7mMVBHuPwDS">question=question_instance</code>. When we run the above query it will return a QuerySet with every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> instance that’s associated with the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> instance <code class="code__2rdF32qjRVp7mMVBHuPwDS">"Is blue a color?"</code>. We used a specific instance before to filter, but we can also use fields, like an ID. Django allows us to prepend <code class="code__2rdF32qjRVp7mMVBHuPwDS">_id</code> to the name of the foreign key table to filter by ID, like so:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; Answer.objects.filter(question_id=3)</span></span><br><span><span class="mtk1">&lt;QuerySet [&lt;Answer: It is a&nbsp;number&gt;]&gt;</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">The above code will return every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> instance related to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> instance whose ID is <code class="code__2rdF32qjRVp7mMVBHuPwDS">3</code>.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">For convenience, here are the commands to get started in the shell:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Since we’ll be working with both <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> model, we also need to import both:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner, Patient</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> capture the first instance of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.first()</code> method.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.filter()</code> method return every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> instance related to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> instance stored in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> variable.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Reverse Relationships</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s get a little deeper into querying two tables. In our previous exercise, we were able to access every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> related to a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> because our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> model held a foreign key to our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> model. What if we wanted to explore the other side of the relationship and use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> model to query for all related <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> instances? This query is called <em>reverse relation</em>, since that the relationship is now flipped, the table that’s doing the querying doesn’t contain a foreign key.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Suppose we have a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">question_instance</code> that stores an instance of our <code class="code__2rdF32qjRVp7mMVBHuPwDS">Question</code> model. We can get the related <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> instances to that question instance by using <a target="_blank" rel="noopener" class="e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0" href="https://docs.djangoproject.com/en/3.1/ref/models/relations/"><code class="code__2rdF32qjRVp7mMVBHuPwDS">_set</code></a> like so. </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">&gt;&gt;&gt; question_instance.answer_set.all()</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Above, we access the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.answer_set</code> property of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">question_instance</code>. By convention, the <code class="code__2rdF32qjRVp7mMVBHuPwDS">_set</code> property is preceded by the lowercase name of the model. Notice that we use <code class="code__2rdF32qjRVp7mMVBHuPwDS">.all()</code> at the end to access every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Answer</code> instance related to <code class="code__2rdF32qjRVp7mMVBHuPwDS">question_instance</code>.</p>
</div></div></div>


<h3>Instructions</h3>

<div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">1.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">For convenience, here are the commands to get started in the shell:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Followed by:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">from vetoffice.models import Owner, Patient</span></span><br></div></code></pre></pre></div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 2 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">2.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">In a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> capture the first instance of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> model using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.first()</code> method.</p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 3 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div><div aria-hidden="false"><div class="checkpoint__Mmv3yv-wu7NJCX0vgcy0h" data-testid="checkpoint-satisfied"><b class="checkpointNumber__P9kFWzdu5a6M0jcG_LgjT">3.</b><div class="checkpointBody__3Sn4jghNHiScLJ7-zmcXUk"><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">Now let’s get every <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code> instance related to the instance stored in the <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> variable.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Apply the <code class="code__2rdF32qjRVp7mMVBHuPwDS">_set</code> property to the <code class="code__2rdF32qjRVp7mMVBHuPwDS">first_owner</code> variable. Then apply the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.all()</code> query at the end. </p>
</div></div></div><div class="checkpointCheckbox__vmGdbkCMW4Z7ET3KCrCJP checkboxSatisfied__1xX8YQAWCZp7OxlyblPKiC"><div class="gamut-xz9pfx-HiddenText e88fw8k0"><span aria-live="assertive">Checkpoint 4 Passed</span></div><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">CRUD Functionality</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Review</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">PHEW! That was a lot to take in. Let’s go over a quick summary of what we’ve learned so far. </p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">CRUD is the four basic functions of a database. CRUD stands for Create, Read, Update and Delete.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">A new instance of a model can be created by calling the model then filling out the fields of the model. The instance can be saved to the database by using <code class="code__2rdF32qjRVp7mMVBHuPwDS">.save()</code>. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">We can view all queries of a model by using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.all()</code> method. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">We can update an instance of a model by reassigning a field value and saving the instance. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">We can delete an instance by using the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.delete()</code> method.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code> method returns an object that matches the argument(s)parameters we give it.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get_or_create()</code> method looks through the database and looks for any object with the conditions that we provide. If it does find an object with our conditions it will return the object if not it will create the object.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">.exclude()</code> method returns an object that does not match the argument we give it. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">We can use the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.order_by()</code> method to return objects in any order we like.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">The <code class="code__2rdF32qjRVp7mMVBHuPwDS">.filter()</code> method can be used to query two tables. The <code class="code__2rdF32qjRVp7mMVBHuPwDS">.filter()</code> method can take in a foreign key and return an instance associated with that foreign key. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">We can query using the reverse relation by appending <code class="code__2rdF32qjRVp7mMVBHuPwDS">_set</code> to a model’s name to find related model instances.</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Congrats! You’ve made it through and learned so much. Now you can use your knowledge to dig deeper into how to interact with the database!</p>
</div></div></div>


<h3>Instructions</h3>

<div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 body__3bSqqzbent-J_gmFLtFRzM"><p class="p__1qg33Igem5pAgn4kPMirjw">If you want to challenge yourself further, consider these challenges:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Create more instances of both <code class="code__2rdF32qjRVp7mMVBHuPwDS">Owner</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Patient</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Create an instance with a field that doesn’t exist or omit a field</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Filter through the instances using multiple arguments</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">There are so many things you can try out, see what else you can do! </p>
</div></div></div>


<h3>Solution</h3>




<h1>Learn</h1>

<div class="gamut-1h3qpnn-Box ebnwbv90"><div aria-hidden="true" class="gamut-haybot-Text e8i0p5k0">Build Python Web Apps with Django</div><span aria-hidden="true" class="gamut-yj8jvy-Text e8i0p5k0">Djaunty Rent-a-Bike</span><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12"><p class="p__1qg33Igem5pAgn4kPMirjw">The owners of the Djaunty Rent-a-Bike company have asked that you help them revamp their old paper and pencil method of renting out bikes. They know that you’ve learned about Django models, databases, and “CRUD” — and they’re excited to see you apply your skills. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In your conversation with the owners, you realized that their booking system is rather streamlined. Their bikes are rented for the day at a set price and they mainly care about three things: bikes, renters, and rentals. You can boil it down to a schema like:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code><ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">bike_type</code> (Rent-a-Bike offers standard, tandem, and electric bikes)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">color</code> (color of the bike)</li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> <ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name</code> (the first name of the renter)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">last_name</code> (the last name of the renter)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">phone</code> (the phone number of the renter)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">vip_num</code> (renter’s VIP status and number)</li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">Rental</code><ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">bike</code> (what bike is being rented)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">renter</code> (who is renting the bike)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">date</code> (the date of the rental)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">price</code> (how much does the bike rental cost)</li>
</ul>
</li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">The owners have asked you to solely focus your skills on the models and not worry about the templates or views. </p>
</div></div><div class="group__LspoGf1Fw0-ac_AUnuvRV"></div></div>


<h3>Instructions</h3>

<div class="tasks__2zeiH_BHmhuJBXUlJC3X0R"><span class="tasksHelp__2gwNuLZ9kdz9gCp9vw39no">Mark the tasks as complete by checking them off</span><h2 class="fit-full fcn-task-header">Planning</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 1" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-1-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-1">1.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Let’s first think about the schema provided. This step is very important because you should start thinking about the underlying shape of the data needed to support your app.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Before you write any code, check out <strong>models.py</strong> to see what’s provided.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Creating the Bike Model</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 2" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-2-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-2">2.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now that you’ve had the chance to think about the program, it’s time to code! Let’s first start by creating a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> model.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 3" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-3-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-3">3.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">You can tell from the provided constants that there are 3 specific types of bikes. Since the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> will have a field for bike type, this is a great time to implement a choice option.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Inside the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> class, create 3 constants:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">STANDARD</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"ST"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">TANDEM</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"TA"</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">ELECTRIC</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">"EL"</code></li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 4" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-4-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-4">4.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">With the constants set up, you can create a list called <code class="code__2rdF32qjRVp7mMVBHuPwDS">BIKE_TYPE_CHOICES</code> that stores tuples. Here’s an example of how the first tuple should look.</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">(STANDARD, "Standard")</code></li>
</ul>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create the other two using that example. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 5" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-5-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-5">5.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">With the setup out of the way, you can create a character field called <code class="code__2rdF32qjRVp7mMVBHuPwDS">bike_type</code>. Provide the arguments: </p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">a max length of 2, </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">choices</code> that only accept values from <code class="code__2rdF32qjRVp7mMVBHuPwDS">BIKE_TYPE_CHOICES</code> </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">defaults to <code class="code__2rdF32qjRVp7mMVBHuPwDS">STANDARD</code>. </li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 6" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-6-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-6">6.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Bikes also have a color and you should track what colors the rental bikes are. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Add a new field called <code class="code__2rdF32qjRVp7mMVBHuPwDS">color</code> which:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">is a character field</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">has a max length of <code class="code__2rdF32qjRVp7mMVBHuPwDS">10</code> characters</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">defaults to an empty string (<code class="code__2rdF32qjRVp7mMVBHuPwDS">""</code>)</li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 7" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-7-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-7">7.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">You’ve added fields for <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code>, but the <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method should be overridden.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Define a new <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method that returns a string with the bike type and color, like:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">"ST -&nbsp;blue"</span></span><br></div></code></pre></pre></div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Creating the Renter Model</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 8" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-8-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-8">8.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Since <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> is set up, you can create the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> model now. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create a new <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> class that has the following fields:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">first_name</code> a character field that has a max length of <code class="code__2rdF32qjRVp7mMVBHuPwDS">30</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">last_name</code> a character field with max length of <code class="code__2rdF32qjRVp7mMVBHuPwDS">30</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">phone</code> a character field with max length of <code class="code__2rdF32qjRVp7mMVBHuPwDS">15</code></li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">vip_num</code> an integer field that defaults to <code class="code__2rdF32qjRVp7mMVBHuPwDS">0</code></li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 9" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-9-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-9">9.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> should also have a custom <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Have the <code class="code__2rdF32qjRVp7mMVBHuPwDS">__str__</code> method return the instance’s first name, last name, and phone as a string. Here’s a sample output: </p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">Padma Lak -&nbsp;#123-456-7890</span></span><br></div></code></pre></pre></div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Creating the Rental Model</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 10" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-10-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-10">10.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw"><code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> are set up, the only one left is <code class="code__2rdF32qjRVp7mMVBHuPwDS">Rental</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Start with the fields:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">bike</code> which is a foreign key for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> model<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">upon the foreign key’s deletion, it should cascade</li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">renter</code> which is a foreign key for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> model<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">upon the foreign key’s deletion, it should cascade</li>
</ul>
</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">date</code> a date field which defaults to today’s date (<code class="code__2rdF32qjRVp7mMVBHuPwDS">datetime.date.today</code>)</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx"><code class="code__2rdF32qjRVp7mMVBHuPwDS">price</code> a float field which defaults to <code class="code__2rdF32qjRVp7mMVBHuPwDS">0.0</code></li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 11" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-11-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-11">11.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">While prices default to <code class="code__2rdF32qjRVp7mMVBHuPwDS">0.0</code>, you’ll need a method to calculate the actual price.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Define a method called <code class="code__2rdF32qjRVp7mMVBHuPwDS">calc_price</code>. Inside the function body, create a variable called <code class="code__2rdF32qjRVp7mMVBHuPwDS">curr_price</code> with a value of <code class="code__2rdF32qjRVp7mMVBHuPwDS">BASE_PRICE</code>. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 12" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-12-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-12">12.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">You can now implement the additional charges.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Add the following conditionals:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">If <code class="code__2rdF32qjRVp7mMVBHuPwDS">self.bike</code>‘s <code class="code__2rdF32qjRVp7mMVBHuPwDS">.bike_type</code> is <code class="code__2rdF32qjRVp7mMVBHuPwDS">"TA"</code> , then increase <code class="code__2rdF32qjRVp7mMVBHuPwDS">curr_price</code> by <code class="code__2rdF32qjRVp7mMVBHuPwDS">TANDEM_SURCHARGE</code>.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">If <code class="code__2rdF32qjRVp7mMVBHuPwDS">self.bike</code>‘s <code class="code__2rdF32qjRVp7mMVBHuPwDS">.bike_type</code> is <code class="code__2rdF32qjRVp7mMVBHuPwDS">"EL"</code> , then increase <code class="code__2rdF32qjRVp7mMVBHuPwDS">curr_price</code> by <code class="code__2rdF32qjRVp7mMVBHuPwDS">ELECTRIC_SURCHARGE</code>.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">If <code class="code__2rdF32qjRVp7mMVBHuPwDS">self.renter</code>‘s <code class="code__2rdF32qjRVp7mMVBHuPwDS">.vip_num</code> is greater than <code class="code__2rdF32qjRVp7mMVBHuPwDS">0</code>, then discount <code class="code__2rdF32qjRVp7mMVBHuPwDS">curr_price</code> by 20%. </li>
</ul>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 13" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-13-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-13">13.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Still within the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.calc_price()</code> method, finalize the cost of the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Rental</code> instance by setting the <code class="code__2rdF32qjRVp7mMVBHuPwDS">.price</code> field as <code class="code__2rdF32qjRVp7mMVBHuPwDS">curr_price</code>.</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Database Setup</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 14" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-14-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-14">14.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Nice, your models are all set up now! This means it’s time to set up the schema in your database.</p>
<p class="p__1qg33Igem5pAgn4kPMirjw">In the terminal execute the command:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py makemigrations</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">If there are any error messages, read through and fix them before proceeding. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 15" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-15-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-15">15.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">The migration file now needs to be run to properly set up your database. Run:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py migrate</span></span><br></div></code></pre></pre></div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Populating Database and Running Queries </h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 16" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-16-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-16">16.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">To check that your models actually work, make some instances! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Start up the Python shell using:</p>
<pre class="pre__3_SOs7YT7NaHjnNunEArSM"><pre><code><div data-lang="plaintext" class="gamut-1oq8wcb-ColorizedContainer e1hgti5c0"><span><span class="mtk1">python3 manage.py shell</span></span><br></div></code></pre></pre><p class="p__1qg33Igem5pAgn4kPMirjw">Then, import your models!</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 17" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-17-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-17">17.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">You’re now set to make instances of your models. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">You can first start with <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code>s. Remember to add in both <code class="code__2rdF32qjRVp7mMVBHuPwDS">bike_type</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">color</code> fields. Also, you’ll need to save these instances to the database! Try to create ~ 5 <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> instances. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 18" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-18-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-18">18.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Moving on to <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code>. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create ~ 3 <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> instances with the proper field types and save them to the database. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 19" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-19-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-19">19.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">With instances of both <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> in the database, you can now make <code class="code__2rdF32qjRVp7mMVBHuPwDS">Rental</code> instances! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Create at least 2 <code class="code__2rdF32qjRVp7mMVBHuPwDS">Rental</code> instances that use 2 different <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> objects and 2 different <code class="code__2rdF32qjRVp7mMVBHuPwDS">Renter</code> objects. You should practice using querying methods to find the objects you want (e.g. <code class="code__2rdF32qjRVp7mMVBHuPwDS">.first()</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">.get()</code>, <code class="code__2rdF32qjRVp7mMVBHuPwDS">.all()</code>, etc.)!</p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 20" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-20-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-20">20.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Now try to fine-tune your querying using methods like <code class="code__2rdF32qjRVp7mMVBHuPwDS">.filter()</code> and <code class="code__2rdF32qjRVp7mMVBHuPwDS">.exclude()</code> and even reverse relationship! It’s up to you how you want to practice. </p>
</div></div></div><div class="hintAccordion__9ohWFNq_viHGmKzOyh-M3"><button aria-expanded="false" class="basicBtn__2_xxdSYwVIY18Fd5pq9JgS accordionButton__3LbMIquV93ec6TYv2l6mjX yellow__2olEZaNZdnw4sc3pSwo39e" data-btn="true"><span class="children__3aFTNwOnkG0i7uCSFwvYT5"><div class="accordionHeader__10Sfx7s_OzXLjiFtCNI7ZV">Stuck? Get a hint</div></span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" role="img" aria-hidden="true" class="expansionIcon__3EAlubPR6T3-MPaeVEwyjl gamut-sd6ku5-Svg eol2zvm0"><title>Arrow Chevron Down Icon</title><path d="M23.25 7.311L12.53 18.03a.749.749 0 01-1.06 0L.75 7.311" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path></svg></button><div class="gamut-1j727xk-StyledAccordionBody eg6ri2w0" style="height: 0px;"></div></div></article></div><h2 class="fit-full fcn-task-header">Finishing up</h2><div><article class="fit-full fcn-task fcn-task--complete"><div class="gamut-1m02y73-FlexBox e1tc6bzh0"><div class="gamut-1efsrtw-Box ebnwbv90"><div aria-checked="true" aria-label="Task item 21" class="fcn-task__check fcn-task__check--checked centeredCheckbox__2QQhtR9gO-52xrQs_8ZEjS" data-cue="discovery-checklist" role="checkbox" tabindex="0" data-testid="task-21-checkbox"><svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-hidden="true" class="gamut-sd6ku5-Svg eol2zvm0"><title>Check Icon</title><path fill-rule="evenodd" clip-rule="evenodd" d="M23.552 3.93a1.5 1.5 0 01.017 2.122l-13.778 14a1.5 1.5 0 01-2.056.077L.513 13.813a1.5 1.5 0 011.974-2.258l6.158 5.385L21.431 3.948a1.5 1.5 0 012.121-.017z" fill="currentColor"></path></svg></div></div><div class="gamut-dtzm1a-Box ebnwbv90"><span class="fcn-task__number" data-testid="task-21">21.</span></div><div><div data-testid="markdown" class="spacing-tight__2Gp7GTqG0TykPQ18OnUOVt markdown__1eeYJ4WPKUcvX_LDDGJR12 narrativeMarkdown__1UywfcBd-60XKky6qUHIYA scrollable___DFOWZAyFa-jr7fZML66U"><p class="p__1qg33Igem5pAgn4kPMirjw">Congratulations! You’ve implemented the models and helped out Djaunty Rent-a-Bike! </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">Now you can rest easy and let your program take care of the work of tracking bikes, renters, and rentals. </p>
<p class="p__1qg33Igem5pAgn4kPMirjw">However, if you want to challenge yourself, consider:</p>
<ul class="ul__11icM1EC_0uPj3OY0Skp4r">
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Adding extra fields to the existing models, e.g. an AM/PM field for the <code class="code__2rdF32qjRVp7mMVBHuPwDS">Rental</code> model. </li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Marking when a <code class="code__2rdF32qjRVp7mMVBHuPwDS">Bike</code> is rented and cannot be booked.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Find out how many rentals one specific person has.</li>
<li class="li__1KqBjwbWA3ze6V0BvXq9Rx">Adding in metadata for the models.</li>
</ul>
</div></div></div></article></div></div>


<h3>Solution</h3>




